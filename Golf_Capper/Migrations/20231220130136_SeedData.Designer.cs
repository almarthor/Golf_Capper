// <auto-generated />
using System;
using Golf_Capper.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Golf_Capper.Migrations
{
    [DbContext(typeof(GolfCapperDbcontext))]
    [Migration("20231220130136_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Golf_Capper.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CoursePar")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfHoles")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("LocationId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "Hvaleyrarvöllur",
                            CoursePar = 71,
                            LocationId = 1,
                            NumberOfHoles = 18
                        });
                });

            modelBuilder.Entity("Golf_Capper.Models.CourseHolePar", b =>
                {
                    b.Property<int>("CourseHoleParId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseHoleParId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("CourseHoleParId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHolePars");

                    b.HasData(
                        new
                        {
                            CourseHoleParId = 1,
                            CourseId = 1,
                            HoleNumber = 1,
                            Par = 4
                        });
                });

            modelBuilder.Entity("Golf_Capper.Models.GamePlayed", b =>
                {
                    b.Property<int>("GamePlayedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GamePlayedId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("GolferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoadedFromDatabase")
                        .HasColumnType("datetime2");

                    b.HasKey("GamePlayedId");

                    b.HasIndex("CourseId");

                    b.HasIndex("GolferId");

                    b.ToTable("GamesPlayed");

                    b.HasData(
                        new
                        {
                            GamePlayedId = 1,
                            CourseId = 1,
                            GolferId = 1,
                            LoadedFromDatabase = new DateTime(2023, 12, 20, 13, 1, 35, 974, DateTimeKind.Local).AddTicks(7006)
                        });
                });

            modelBuilder.Entity("Golf_Capper.Models.Golfer", b =>
                {
                    b.Property<int>("GolferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GolferId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Handicap")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GolferId");

                    b.ToTable("Golfers");

                    b.HasData(
                        new
                        {
                            GolferId = 1,
                            FirstName = "Almar",
                            Handicap = 12,
                            LastName = "Egilsson"
                        });
                });

            modelBuilder.Entity("Golf_Capper.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Address = "Hvaleyrarbraut",
                            City = "Hafnarfjörður",
                            Zip = 220
                        });
                });

            modelBuilder.Entity("Golf_Capper.Models.Score", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"));

                    b.Property<int?>("GamePlayedId")
                        .HasColumnType("int");

                    b.Property<int>("Hole")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.HasKey("ScoreId");

                    b.HasIndex("GamePlayedId");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            ScoreId = 1,
                            GamePlayedId = 1,
                            Hole = 1,
                            Strokes = 4
                        });
                });

            modelBuilder.Entity("Golf_Capper.Models.Course", b =>
                {
                    b.HasOne("Golf_Capper.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Golf_Capper.Models.CourseHolePar", b =>
                {
                    b.HasOne("Golf_Capper.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Golf_Capper.Models.GamePlayed", b =>
                {
                    b.HasOne("Golf_Capper.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Golf_Capper.Models.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferId");

                    b.Navigation("Course");

                    b.Navigation("Golfer");
                });

            modelBuilder.Entity("Golf_Capper.Models.Score", b =>
                {
                    b.HasOne("Golf_Capper.Models.GamePlayed", "GamesPlayed")
                        .WithMany()
                        .HasForeignKey("GamePlayedId");

                    b.Navigation("GamesPlayed");
                });
#pragma warning restore 612, 618
        }
    }
}
